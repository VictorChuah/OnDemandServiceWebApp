@using fyptest.Models
@using fyptest.Infrastructure.HtmlHelpers
@model RegisterProviderModel



@{ ViewBag.Title = "RegisterProvider";
  Layout = "~/Views/Shared/_Layout.cshtml"; }

@section head{
  <style>
    #upload img {
      width: 200px;
      height: 200px;
    }
  </style>
}

<div style="height: 113px;"></div>

<div class="limiter">
  <div class="container-login100">
    <div class="wrap-login100">
      <div class="login100-form-title" style="background-image: url(@Url.Content("~/Content/login/")images/image4.jpg);">
        <span class="login100-form-title-1">
          Sign Up
        </span>
      </div>


      @using (Html.BeginForm("RegisterProvider", "JobProvider", FormMethod.Post, new { enctype = "multipart/form-data" }))
      {
@Html.AntiForgeryToken()

        <div class="form-horizontal">
          <h4 style="text-align: center; font-weight: bold;">(Only For Provider)</h4>
          <hr />

          @Html.ValidationSummary(true, "", new { @class = "text-danger" })

          @*<div class="form-group">
              @Html.LabelFor(model => model.Name, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
              </div>
            </div>*@
          <div class="form-group">
            @Html.LabelFor(model => model.Email, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Email" } })
              @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.Password, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Password", type = "password" } })
              @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.ConfirmPass, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.EditorFor(model => model.ConfirmPass, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Re-type Password", type = "password" } })
              @Html.ValidationMessageFor(model => model.ConfirmPass, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.Phone, "", htmlAttributes: new { @class = "control-label col-md-5" })
            <div class="col-md-10">
              @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Contact Number (60123456789)", @id = "Phone" } })
              @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.Address, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
              @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Address (If applicable)" } })
              @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.ServiceType, "Service Type", htmlAttributes: new { @class = "control-label col-md-5" })
            <div class="col-md-10">
              @Html.DropDownList("ServiceType", (IEnumerable<SelectListItem>)ViewData["type"], htmlAttributes: new { @class = "form-control" })
              @Html.ValidationMessageFor(model => model.ServiceType, "", new { @class = "text-danger" })
            </div>
          </div>


          @*trigger*@
          <div class="form-group">
            <label class="control-label col-md-10">Are you under an organisation or work individually?</label>
            @Html.LabelFor(model => model.CompanyIndividual, "", htmlAttributes: new { @class = "control-label col-md-2" })
            <div>
              <label style="padding-left: 1em">@Html.RadioButtonFor(model => model.CompanyIndividual, false, htmlAttributes: new { @id = "option-job-type-1", @class = "sIndi" }) Individual</label>
              <label style="padding-left: 1em">@Html.RadioButtonFor(model => model.CompanyIndividual, true, htmlAttributes: new { @id = "option-job-type-2", @class = "sCompany" }) Company/Team</label>
            </div>
            @Html.ValidationMessageFor(model => model.CompanyIndividual, "", new { @class = "text-danger" })
          </div>


          @*individual selected*@
          <div id="indi">
            <div class="form-group">
              <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Full Name", @id = "name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
              </div>
            </div>

            <div class="form-group">
              <label class="control-label col-md-10">Are you certified professional or self-learnt? </label>
              @Html.LabelFor(model => model.Formality, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div>
                <label style="padding-left: 1em">@Html.RadioButtonFor(model => model.Formality, false, htmlAttributes: new { @id = "option-job-type-1", @class = "formality" }) Self-learnt</label>
                <label style="padding-left: 1em">@Html.RadioButtonFor(model => model.Formality, true, htmlAttributes: new { @id = "option-job-type-2", @class = "formality" }) Certified</label>
              </div>
              @Html.ValidationMessageFor(model => model.Formality, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
              <label class="control-label col-md-10">Please upload your documentation as a prove that you have comprehend knowledge of selected service.</label>
              <label class="control-label col-md-10">For example, previous completed work (raw .ai file of Photoshop work, or a proof of working experience in a plumbing service shop)</label>
            </div>

          </div>

          @*company selected*@
          <div id="company">
            <div class="form-group">
              @Html.LabelFor(model => model.CompanyName, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Company Name", @id = "cName" } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
              </div>
            </div>

            <div class="form-group">
              <label class="control-label col-md-10">Please upload company documents like SSM, and other related document. Achievement certificates are welcome to upload too</label>
            </div>
          </div>



          <div class="form-group">
            @Html.LabelFor(model => model.Document, "Document (Multiple file upload is supported)", htmlAttributes: new { @class = "control-label col-md-7" })
            <div class="col-md-10">
              @Html.TextBoxFor(m => m.Document, new { type = "file", @multiple = "@multiple" })
              @Html.ValidationMessageFor(model => model.Document, "", new { @class = "text-danger" })
            </div>
          </div>

          <div class="form-group">
            @Html.LabelFor(model => model.ProfileImage, "Profile Image", htmlAttributes: new { @class = "control-label col-md-5" })
            <div class="col-md-10">
              <label class="text-info p-2 rounded border border-info" id="upload">
                @Html.TextBoxFor(m => m.ProfileImage, new
                {
                  type = "file",
                  accept = "image/jpeg,image/png,image/jpeg",
                  hidden = ""
                })
                <img src="~/Image/Profile/photo.jpg">
              </label>
            </div>
            @Html.ValidationMessageFor(model => model.ProfileImage, "", new { @class = "text-danger" })
          </div>

          <div class="form-group">
            <div style="padding-left: 1em">
              @Html.GoogleCaptcha()
              @Html.InvalidGoogleCaptchaLabel("Captcha is not valid !")
            </div>
          </div>


          <div class="container-login100-form-btn" style="padding-left: 1em; padding-bottom: 1em">
            <button class="login100-form-btn" id="submit">
              Sign Up
            </button>
            <img id="loading" src="~/Image/Background/loading.gif" style="height:50px; width:50px" />
          </div>
        </div>}
    </div>
  </div>
</div>
@section foot {
  @Scripts.Render("~/bundles/jqueryval")


  <script>
    $.validator.setDefaults({
      ignore: ''
    });

    $(document).ready(() => {
      $('#indi').hide();
      $('#company').hide();
      $('#loading').hide();
    });

    $('.sCompany').change(() => {
      $('#indi').hide(500);
      $('#company').show(500);
      $('#name').val(null);
      $('.formality').prop('checked', false);
    })

    $('.sIndi').change(() => {
      $('#company').hide(500);
      $('#cName').val(null);
      $('#indi').show(500);
    })

    jQuery(function ($) {
      $("#Phone").mask("99999999999");
    });

    function validatePhoto(f) {
      let reType = /^image\/(jpeg|png)$/i;
      let reName = /^.+\.(jpg|jpeg|png)$/i;

      return f &&
        f.size <= 1 * 1024 * 1024 &&
        reType.test(f.type) &&
        reName.test(f.name);
    }

    let src = null;

    $('#upload input').change(e => {
      let f = e.target.files[0];
      let img = $(e.target).siblings('img')[0];

      if (!src) src = img.src;

      if (validatePhoto(f)) {
        img.src = URL.createObjectURL(f);
      }
      else {
        img.src = src;
        e.target.value = '';
      }
      $(e.target).valid();
    });

    $('#submit').click(() => {
      $('loading').show();
    });
  </script>
}

