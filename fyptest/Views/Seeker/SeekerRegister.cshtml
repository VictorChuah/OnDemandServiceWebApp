@using fyptest.Models
@using fyptest.Infrastructure.HtmlHelpers
@model SeekerRegisterModel

@{ ViewBag.Title = "RegisterSeeker";
  Layout = "~/Views/Shared/_Layout.cshtml"; }
@section head{
  <style>

    #upload img {
      width: 200px;
      height: 200px;
    }
  </style>
}
<div style="height: 113px;"></div>
<div class="limiter">
  <div class="container-login100">
    <div class="wrap-login100">
      <div class="login100-form-title" style="background-image: url(@Url.Content("~/Content/login/")images/image4.jpg);">
        <span class="login100-form-title-1">
          Sign Up
        </span>
      </div>

      @using (Html.BeginForm("SeekerRegister", "Seeker", FormMethod.Post, new { enctype = "multipart/form-data" }))
      {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
          <h4 style="text-align: center; font-weight: bold;">(Only For Seeker)</h4>
          <hr />

          <div class="form-group">
            <div class="col-md-10">
              @Html.ValidationMessage("Error", null, new { @class = "text text-danger" })
            </div>
            <div class="col-md-10">

              @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.FullName, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
              </div>
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.Email, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Email" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
              </div>
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.Password, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Password", type = "password" } })
                @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
              </div>
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.ConfirmPassword, "", htmlAttributes: new { @class = "control-label col-md-2" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Re-type Password", type = "password" } })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
              </div>
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.Phone, "", htmlAttributes: new { @class = "control-label col-md-5" })
              <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control input100", placeholder = "Contact Number (60123456789)", @id = "Phone" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
              </div>
            </div>
            <div class="form-group">
              @Html.LabelFor(model => model.Photo, "Profile Image", htmlAttributes: new { @class = "control-label col-md-5" })
              <div class="col-md-10">
                <label class="text-info p-2 rounded border border-info" id="upload">
                  @Html.TextBoxFor(m => m.ImageFile, new
             {
               type = "file",
               accept = "image/jpeg,image/png",
               hidden = ""
             })
                  <img src="~/Image/Profile/photo.jpg">
                </label>
              </div>
              @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
              <div style="padding-left: 1em">
                @Html.GoogleCaptcha()
                @Html.InvalidGoogleCaptchaLabel("Captcha is not valid !")
              </div>
            </div>

            <div class="container-login100-form-btn" style="padding-left: 1em; padding-bottom: 1em">
              <button class="login100-form-btn">
                Sign Up
              </button>
            </div>
          </div>
        </div>
      }
    </div>
  </div>
  @section foot {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
  $.validator.setDefaults({
      ignore: ''
    });

    $(document).ready(() => {
      $('#indi').hide();
      $('#company').hide();
    });

    $('.sCompany').change(() => {
      $('#indi').hide(500);
      $('#company').show(500);
      $('#name').val(null);
      $('.formality').prop('checked', false);
    })

    $('.sIndi').change(() => {
      $('#company').hide(500);
      $('#cName').val(null);
      $('#indi').show(500);
    })

    jQuery(function ($) {
      $("#Phone").mask("99999999999");
    });

    function validatePhoto(f) {
      let reType = /^image\/(jpeg|png)$/i;
      let reName = /^.+\.(jpg|jpeg|png)$/i;

      return f &&
        f.size <= 1 * 1024 * 1024 &&
        reType.test(f.type) &&
        reName.test(f.name);
    }

    let src = null;

    $('#upload input').change(e => {
      let f = e.target.files[0];
      let img = $(e.target).siblings('img')[0];

      if (!src) src = img.src;

      if (validatePhoto(f)) {
        img.src = URL.createObjectURL(f);
      }
      else {
        img.src = src;
        e.target.value = '';
      }
      $(e.target).valid();
    });</script>
  }
